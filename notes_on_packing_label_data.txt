Tasks:

PackingLabelsController#create
  Create PackingLabelsPrintable record
  Invoke delayed "ProcessPackingLabels" interactor

PackingLabelsController#show
  view
  Javascript for "Generating..." progress meter / polling
  json status

ProcessPackingLabels interactor:
  get the PackingLabelsPrintable and associated Delivery from the database
  invoke PackingLabels::Generator.generate
  store resulting PDF as attachment on the PackingLabelsPrintable

QR Code update:
     Use a "generic" QR handler route, like:
     http://app.localorbit.com/o/1234

     Route:
       get "o/:id", to: "qr_code#order"

QrCodeController < ApplicationController
     # relieve some of the before_filter requirements
     def order
          params[:id]
          # get the order, find out current user, redirect to a) proper order url (admin or buyer) and b) go to proper subdomain


# Shape of our data:

Process:

Delivery >-?-> order_infos >-?-> labels >-?-> pages >> HTML >> PDF


Data source:

Delivery
  Order*
    OrderItem*



pages: [ page* ]

page:
  a
  b
  c
  d

  - a,b,c,d are all "labels"

label:
  template: path_to_view_string
  data

label^order:
  template: path_to_view_string
  data
    order_info
    qr_code_url: string_url

label^product:
  template: path_to_view_string
  data
    order_info
    qr_code_url: string_url
    product_info

order_info:
  deliver_on: string
  order_number: string
  buyer_name: string
  market_logo_url: string
  order_url: string
  product_infos: [ product_info* ]

product_info:
  product_name: string
  quantity: number
  unit_desc: string
  lot_desc: string
  producer_name: string


