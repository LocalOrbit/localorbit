/* The MIT License (MIT)

Copyright (c) 2013 guillaumervls

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

(function() {
  // Note to future devs: this is a forked/mutated version of https://github.com/guillaumervls/react-infinite-scroll

  // The original wasn't compatibile with React >= .12, so I took a fork that made it so compatible, https://github.com/ramast/react-infinite-scroll, and then modified it further to insert a tbody, not a div (existing CSS and tests are expecting a table on this screen).

  // There were much more stable and well-maintained libraries than this, but this is the only one that didn't need to be passed the height of each element in advance.


  window.InfiniteScroll = React.createClass({
    displayName: 'InfiniteScroll',
    propTypes: {
      pageStart: React.PropTypes.number,
      threshold: React.PropTypes.number,
      loadMore: React.PropTypes.func.isRequired,
      hasMore: React.PropTypes.bool
    },
    getDefaultProps: function () {
      return {
        pageStart: 0,
        hasMore: false,
        threshold: 250
      };
    },
    componentDidMount: function () {
      this.attachScrollListener();
    },
    componentDidUpdate: function () {
      this.detachScrollListener();
      this.attachScrollListener();
    },
    render: function () {
      var props = this.props;
      return React.DOM.tbody({style: {maxHeight: "500", overflow: "auto", display: "block"}}, props.children, props.hasMore && props.loader);
    },
    scrollListener: function () {
      var el = this.getDOMNode();
      if (el.scrollHeight - el.clientHeight - el.scrollTop < Number(this.props.threshold)) {
        this.detachScrollListener();
        // call loadMore after detachScrollListener to allow
        // for non-async loadMore functions
        this.props.loadMore();
      }
    },
    attachScrollListener: function () {
      if (!this.props.hasMore) {
        return;
      }
      this.getDOMNode().addEventListener('scroll', this.scrollListener);
      this.getDOMNode().addEventListener('resize', this.scrollListener);
      this.scrollListener();
    },
    detachScrollListener: function () {
      this.getDOMNode().removeEventListener('scroll', this.scrollListener);
      this.getDOMNode().removeEventListener('resize', this.scrollListener);
    },
    componentWillUnmount: function () {
      this.detachScrollListener();
    }
  });
}).call(this);
